package com.krishna.gateway.filter;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import com.krishna.gateway.util.JwtUtil;
import org.springframework.security.core.GrantedAuthority;

@Component
public class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {

    @Autowired
    private RouteValidator validator;

    @Autowired
    private JwtUtil jwtUtil;

    public AuthenticationFilter() {
        super(Config.class);
    }

    @Override
    public GatewayFilter apply(Config config) {
        return ((exchange, chain) -> {
            if (validator.isSecured.test(exchange.getRequest())) {
                //header contains token or not
                if (!exchange.getRequest().getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
                    throw new RuntimeException("missing authorization header");
                }

                String authHeader = exchange.getRequest().getHeaders().get(HttpHeaders.AUTHORIZATION).get(0);
                if (authHeader != null && authHeader.startsWith("Bearer ")) {
                    authHeader = authHeader.substring(7);
                }
                try {
                    jwtUtil.validateToken(authHeader);
                    List<String> userRoles = jwtUtil.extractRoles(authHeader);

                    if (validator.isRoleBased(exchange.getRequest(), userRoles)) {
                        // User has the required role, check specific endpoints
                        String path = exchange.getRequest().getPath().toString();

                        if ((path.startsWith("/users/get/all") || path.startsWith("/update")) && userRoles.contains("USER")) {
                            // User is trying to access delete or update, which requires admin role
                        	System.out.println("Insufficient role for accessing the resource");
                            throw new RuntimeException("Insufficient role for accessing the resource");
                        }

                        // User has the required role, allow access
                        return chain.filter(exchange);
                    } else {
                        // User does not have the required role, deny access
                        throw new RuntimeException("Insufficient role for accessing the resource");
                    }

                } catch (Exception e) {
                    System.out.println("invalid access...!");
                    throw new RuntimeException("un authorized access to application");
                }
            }
            return chain.filter(exchange);
        });
    }

    public static class Config {

    }
}