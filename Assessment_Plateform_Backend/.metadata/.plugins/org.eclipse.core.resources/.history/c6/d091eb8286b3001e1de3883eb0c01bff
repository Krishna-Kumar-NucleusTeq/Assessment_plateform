package com.krishna.auth.configuration;

import java.util.Arrays;
import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.krishna.auth.entity.UserCrediential;

public class CustomUserDetails implements UserDetails {
	
	
//    private String username;
//    private String password;
//    private Collection<? extends GrantedAuthority> authorities;
	
	private UserCrediential user;
	
    
    public CustomUserDetails(UserCrediential user) {
	super();
	this.user = user;
}

//	public CustomUserDetails(UserCrediential userCredential) {
//        this.username = userCredential.getEmailId();
//        this.password = userCredential.getPassword();
//        this.authorities = Arrays.asList(new SimpleGrantedAuthority("ROLE_"+userCredential.getRole()));
//
//    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
    	
    	SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(user.getRole());
        return Arrays.asList(simpleGrantedAuthority);
    }
    

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getEmailId();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


//
//public class CustomUserDetails implements UserDetails {
//	
//	
//    private String username;
//    private String password;
//    private Collection<? extends GrantedAuthority> authorities;
//    
//    public CustomUserDetails(UserCrediential userCredential) {
//        this.username = userCredential.getEmailId();
//        this.password = userCredential.getPassword();
//        this.authorities = Arrays.asList(new SimpleGrantedAuthority("ROLE_"+userCredential.getRole()));
//
//    }
//
//    @Override
//    public Collection<? extends GrantedAuthority> getAuthorities() {
//        return authorities;
//    }
//
//    @Override
//    public String getPassword() {
//        return password;
//    }
//
//    @Override
//    public String getUsername() {
//        return username;
//    }
//
//    @Override
//    public boolean isAccountNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isAccountNonLocked() {
//        return true;
//    }
//
//    @Override
//    public boolean isCredentialsNonExpired() {
//        return true;
//    }
//
//    @Override
//    public boolean isEnabled() {
//        return true;
//    }
//}